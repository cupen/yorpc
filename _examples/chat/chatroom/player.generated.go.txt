// generated by idl compiler
package chatroom

import (
	"errors"
)

type Player interface {
	// rpc
	Speak(*Message) ([]byte, error)

	// handler
	SpeakAsync(*Message) error
}

type PlayerSession struct {
	instance Player
}

func NewPlayerSession(instance Player) *PlayerSession {
	return &PlayerSession{
		instance: instance,
	}
}

func (server *PlayerSession) OnCall(methodId uint16, args []byte) ([]byte, error) {
	api := server.instance
	if api == nil {
		return nil, errors.New("no api instance")
	}

	switch methodId {
	case 1:
		msg := Message{}
		if err := msg.UnmarshalYB(args); err != nil {
			return nil, err
		}
		resp, err := api.Speak(&msg)
		if err != nil {
			return nil, err
		}
		return resp, err
	default:
		return nil, errors.New("no api defined")
	}
}

func (server *PlayerSession) OnSend(methodId uint16, args []byte) error {
	api := server.instance
	if api == nil {
		return errors.New("no api instance")
	}

	switch methodId {
	case 2:
		msg := Message{}
		if err := msg.UnmarshalYB(args); err != nil {
			return err
		}
		return api.SpeakAsync(&msg)
	default:
		return errors.New("no api defined")
	}
}
