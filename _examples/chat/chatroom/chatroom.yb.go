// Packagechatroom is generated by yobuffer@0.1.0
package chatroom

import (
	"fmt"
	"reflect"

	"github.com/cupen/yobuffer/encodings/tiny"
)

var (
	structs map[int]reflect.Type
)

func init() {
	structs = map[int]reflect.Type{
		0: reflect.TypeOf(&void{}),
	
		10001: reflect.TypeOf(&Message{}),
	}
}




// void 
type void struct {
	
}

func (t *void) Size() (size int) {
	return
}

func (t *void) Marshal() ([]byte, error) {
	dAtA := make([]byte, t.Size())
	return dAtA, nil
}

func (t *void) Unmarshal(dAtA []byte) error {
	return nil
}
// Message "聊天消息"
type Message struct {
	UserID int64 `yobuffer:"1"`
	Text string `yobuffer:"2"`
	Int64 int64 `yobuffer:"3"`
	
}

func (t *Message) Size() (size int) {
	size += 8 // UserID<int64>

	size += 4 + len(t.Text) // Text<string>

	size += 8 // Int64<int64>

	return
}

func (t *Message) Marshal() ([]byte, error) {
	dAtA := make([]byte, t.Size()) 
	enc := tiny.GetEncoder()
	i := 0
	// UserID<int64>
	enc.Int64(dAtA[i:], t.UserID)
	i += 8
	
	// Text<string>
	enc.String(dAtA[i:], t.Text)
	i += 4+len(t.Text)
	
	// Int64<int64>
	enc.Int64(dAtA[i:], t.Int64)
	i += 8
	
	if i != len(dAtA) {
		return nil, fmt.Errorf("invalid data size. expected:%d  actual:%d", len(dAtA), i)
	}

	return dAtA, nil
}

func (t *Message) Unmarshal(dAtA []byte) error { 
	dec := tiny.GetDecoder()
	i := 0
	// UserID<int64>
	t.UserID = dec.Int64(dAtA[i:])
	i += 8
	
	// Text<string>
	t.Text = dec.String(dAtA[i:])
	i += 4+len(t.Text)
	
	// Int64<int64>
	t.Int64 = dec.Int64(dAtA[i:])
	i += 8
	
	return nil
}




// ==================
//     Define RPC 
// ==================
// ChatroomAPI ...
type ChatroomAPI interface {
	// "发送聊天消息"
	// (text Message,) 
	Speak(*Message)(*void, error)
	
	// "发送聊天消息"
	// (text Message,) 
	SpeakAsync(*Message)(*void, error)
	
}

func NewChatroomSession(instance ChatroomAPI) *ChatroomSession {
	return &ChatroomSession {
		instance: instance,
	}
}

type ChatroomSession struct {
	instance ChatroomAPI
}

// OnCall ...
func (s *ChatroomSession) OnCall(methodId uint16, args []byte) ([]byte, error) {
	api := s.instance
	if api == nil {
		return nil, fmt.Errorf("missing RPC instance")
	}

	switch methodId {
	case 1001:
		msg := Message{}
		if err := msg.Unmarshal(args); err != nil {
			return nil, err
		}
		resp, err := api.Speak(&msg)

		if err != nil {
			return nil, err
		}
		return resp.Marshal()

	case 1002:
		msg := Message{}
		if err := msg.Unmarshal(args); err != nil {
			return nil, err
		}
		resp, err := api.SpeakAsync(&msg)

		if err != nil {
			return nil, err
		}
		return resp.Marshal()

	default:
		return nil, fmt.Errorf("missing method id:%d args:%v", methodId, args)
	}
}

// OnSend ...
func (s *ChatroomSession) OnSend(methodId uint16, args []byte) error {
	return nil
}
