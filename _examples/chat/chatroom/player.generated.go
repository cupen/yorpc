// generated by idl compiler
package chatroom

import (
	"errors"
)

type Player interface {
	// rpc
	Speak(args []byte) ([]byte, error)

	// handler
	SpeakAsync(args []byte) error
}

type PlayerSession struct {
	instance Player
}

func NewPlayerSession(instance Player) *PlayerSession {
	return &PlayerSession{
		instance: instance,
	}
}

func (server *PlayerSession) OnCall(methodId uint16, args []byte) ([]byte, error) {
	api := server.instance
	if api == nil {
		return nil, errors.New("no api instance")
	}

	switch methodId {
	case 1:
		return api.Speak(args)
	default:
		return nil, errors.New("no api defined")
	}
}

func (server *PlayerSession) OnSend(methodId uint16, args []byte) error {
	api := server.instance
	if api == nil {
		return errors.New("no api instance")
	}

	switch methodId {
	case 2:
		return api.SpeakAsync(args)
	default:
		return errors.New("no api defined")
	}
}
